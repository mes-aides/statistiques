{"version":3,"file":"static/webpack/static/development/pages/index.js.0df09232ba84e72c8023.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import {useState, useCallback, useEffect} from 'react'\nimport {categoricalColorSchemes} from '@nivo/colors'\nimport fetch from 'isomorphic-unfetch'\nimport { scaleOrdinal } from 'd3-scale'\nimport { ResponsiveBar } from '@nivo/bar'\n\nconst catMapping = {\n    show: { cat: 'Affiché' },\n    click: { cat: 'Cliqué' },\n    form: { cat: 'Actionné', name: 'Formulaire' },\n    teleservice: { cat: 'Actionné', name: 'Téléservice' },\n    instructions: { cat: 'Actionné', name: 'Instructions' },\n    link: { cat: 'Actionné', name: 'Lien' },\n    msa: { cat: 'Actionné', name: 'MSA' },\n    'show-unexpected': { cat: 'Incompris'},\n    close: { cat: 'Expliqué', name: 'Fermé'},\n    'retour-logement':  {cat: 'Expliqué', name: 'Retour page logement'},\n    'simulation-caf':  {cat: 'Expliqué', name: 'Simulateur CAF'},\n    email: { cat: 'Expliqué', name: 'Email'},\n}\n\nconst cats = [\n    'Affiché',\n    'Cliqué',\n    'Actionné',\n    'Incompris',\n    'Expliqué'\n]\nconst colors = scaleOrdinal(categoricalColorSchemes.category10)\n\nfunction apply(prop, base, shouldShow) {\n    let result = base.subtable.reduce((accum, table) => {\n        if (!catMapping[table.label]) {\n            return accum\n        }\n        accum[catMapping[table.label].cat] = accum[catMapping[table.label].cat] || {\n            category: catMapping[table.label].cat\n        }\n        accum[catMapping[table.label].cat][table.label] = table[prop]\n        return accum\n    }, {})\n\n    Object.keys(shouldShow).forEach(k => {\n        if (!shouldShow[k]) {\n            delete result[k]\n        }\n    })\n\n    return Object.values(result)\n}\n\nconst sources = {\n    nb_uniq_visitors: 'Visiteur unique',\n    nb_visits: 'Visite',\n    nb_events: 'Évènement'\n}\n\nconst periods = {\n    day: 'Hier',\n    month: 'Mois en cours'\n}\n\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\nconst MyResponsiveBar = ({ data /* see data tab */ }) => (\n    <ResponsiveBar\n        data={data}\n        keys={Object.keys(catMapping)}\n        indexBy=\"category\"\n        margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n        padding={0.3}\n        colors={({ id }) => colors(id)}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n        animate={false}\n    />\n)\n\nfunction Home() {\n    const [benefits, setBenefits] = useState([]);\n    const [period, setPeriod] = useState('day');\n    const [source, setSource] = useState('nb_visits');\n    const [show, setShow] = useState(cats.reduce((accum, c) => {\n        accum[c] = true\n        return accum\n    }, {}))\n\n    \n    async function fetchData() {\n        try {\n            const res = await fetch('https://stats.data.gouv.fr/index.php?date=yesterday&expanded=1&filter_limit=50&format=JSON&idSite=9&method=Events.getName&module=API&period=month&token_auth=d64b900ff31c08aaa853a3f43daf6dba')\n            const json = await res.json()\n            setBenefits(json)\n\n        } catch {}\n    }\n\n    useEffect(() => {\n      fetchData();\n    }, []);\n\n    const handleSourceChange = useCallback(e => {\n        setSource(e.target.value)\n    })\n    const handleShowChange = useCallback((cat, value) => {\n        setShow({...show, [cat]: value})\n    })\n    return (\n        <div>\n        <style jsx>{`\n            .chart {\n                height: 400px;\n            }\n            .list {\n                display: flex;\n                flex-wrap: wrap;\n            }\n            .cell {\n                width: 400px;\n            }\n            h3 {\n                min-height: 3em;\n            }\n          `}</style>\n          <div className=\"list\">\n                <div className=\"cell\">\n                    <label>\n                        Période de référence\n                        <select onChange={handleSourceChange}>\n                        {\n                            Object.keys(sources).map(k => {\n                                return <option key={k} value={k}>{sources[k]}</option>\n                            })\n                        }\n                        </select>\n                    </label>\n                    <label>\n                        Source des données\n                        <select onChange={handleSourceChange}>\n                        {\n                            Object.keys(sources).map(k => {\n                                return <option key={k} value={k}>{sources[k]}</option>\n                            })\n                        }\n                        </select>\n                    </label>\n                    <table>\n                    <tbody>\n                    {\n                        cats.map(cat => {\n                            return (\n                                <tr key={cat}>\n                                    <td>\n                                        <label>{show[cat]}<input type=\"checkbox\" checked={show[cat]} onChange={e => handleShowChange(cat, e.target.checked)} />\n                                        {cat}</label>\n                                    </td>\n                                    <td>\n                                    {Object.keys(catMapping).map(catId => {\n                                        if (catMapping[catId].cat === cat) {\n                                            return <div key={catId}><span style={{color:colors(catId)}}>◼</span>&nbsp;{catMapping[catId].name || catMapping[catId].cat}</div>\n                                        }\n                                    })}\n                                    </td>\n                                </tr>\n                            )\n                        })\n                    }\n                    </tbody>\n                    </table>\n                </div>\n          {benefits.map(b => {\n            let l = b.label\n            let data = apply(source, b, show)\n\n            if (!data.length) {\n                return\n            }\n\n            return (\n                <div key={l} className=\"cell\">\n                    <h3>{l}</h3>\n                    <div className=\"chart\">\n                        <MyResponsiveBar data={data} />\n                    </div>\n                </div>\n            )\n          })}\n          </div>\n        </div>\n    );\n}\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAZA;AAeA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAVA;AACA;AASA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AACA;AAkBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgsourceRoot":""}